my_data %>% t_test(effort ~ method, paired = F) # I dont think I am running this command correctly
p<- ggboxplot(
my_data, x = "method", y = "effort"
)
p
t.test(my_data[my_data$method == "PHYSICAL",]$effort, my_data[my_data$method == "AR",]$effort, var.equal = F)
t.test(my_data[my_data$method == "PHYSICAL",]$effort, my_data[my_data$method == "RL_CLUSTER",]$effort, var.equal = F)
t.test(my_data[my_data$method == "AR",]$effort, my_data[my_data$method == "RL_CLUSTER",]$effort, var.equal = F)
#effect size for significants
library(MBESS)
abs(smd(my_data[my_data$method == "PHYSICAL",]$effort, my_data[my_data$method == "AR",]$effort))
iqr_rcs_agent <- IQR(my_data[my_data$method == "RL_CLUSTER",]$rcs)
quantiles <- quantile(my_data[my_data$method == "RL_CLUSTER",]$rcs)
first_quartile <- my_data[my_data$method == "RL_CLUSTER" & my_data$rcs <= quantiles[[2]],]
last_quartile <- my_data[my_data$method == "RL_CLUSTER" & my_data$rcs >= quantiles[[4]],]
AR_issue = c(3, 8, 17, 27, 32, 35, 48, 55, 64)
RL_issue = c(1, 7, 11, 16, 22, 34, 44, 46, 57, 61, 66)
AR_issue_data = my_data[my_data$pid %in% AR_issue,]
RL_issue_data = my_data[my_data$pid %in% RL_issue,]
AR_non_issue_data = my_data[!(my_data$pid %in% AR_issue) & my_data$method == "AR",]
RL_non_issue_data = my_data[!(my_data$pid %in% RL_issue) & my_data$method == "RL_CLUSTER",]
issue_data = rbind(AR_issue_data, RL_issue_data)
non_issue_data = rbind(AR_non_issue_data, RL_non_issue_data)
issue_data$interaction_issue = rep(TRUE, nrow(issue_data))
non_issue_data$interaction_issue = rep(FALSE, nrow(non_issue_data))
AR_data = rbind(issue_data[issue_data$method == "AR",], non_issue_data[non_issue_data$method == "AR",])
RL_data = rbind(issue_data[issue_data$method == "RL_CLUSTER",], non_issue_data[non_issue_data$method == "RL_CLUSTER",])
#########################
# FOR Unassisted AR condition
#########################
AR_data %>% group_by(interaction_issue) %>% identify_outliers(rcs);
AR_data %>% group_by(interaction_issue) %>% shapiro_test(rcs);
leveneTest(AR_data$rcs~AR_data$interaction_issue);
#kruskal.test(rcs~interaction_issue, data = AR_data)
ezANOVA(data = AR_data, dv = .(rcs), wid = .(pid), between = .(interaction_issue), type = 3, detailed = T);
#########################
# FOR Assisted AR condition
#########################
RL_data %>% group_by(interaction_issue) %>% identify_outliers(rcs);
RL_data %>% group_by(interaction_issue) %>% shapiro_test(rcs);
leveneTest(RL_data$rcs~RL_data$interaction_issue);
kruskal.test(rcs~interaction_issue, data = RL_data)
#########################
# FOR ALL AR CONDITIONS
#########################
new_data = rbind(issue_data, non_issue_data)
new_data %>% group_by(interaction_issue) %>% identify_outliers(rcs);
new_data %>% group_by(interaction_issue) %>% shapiro_test(rcs);
leveneTest(new_data$rcs~new_data$interaction_issue);
kruskal.test(rcs~interaction_issue, data = new_data)
p <- ggplot(means_sd, aes(x = Condition, y = rcs, fill = Condition)) +
geom_bar(stat = "identity", colour = "black", width = 0.8) +
geom_errorbar(aes(ymin = rcs-sd, ymax = rcs + sd), width = 0.2, position = position_dodge(0.9)) +
geom_text(aes(label = round(rcs, digits = 3)), y = 0.006) +
#geom_text(aes(label = comma(rcs)), y = 0.006) + # for scientific labels
ylab(label = "Rate Correct Score") +
theme_minimal() +
scale_fill_brewer(palette = "Accent") +
scale_x_discrete(limits = c("Paper", "Unassisted AR", "Assisted AR")) +
scale_y_continuous(labels = comma) # for scientific labels
p
p <- ggplot(means_sd, aes(x = Condition, y = rcs, fill = "gray")) +
geom_bar(stat = "identity", colour = "black", width = 0.8) +
geom_errorbar(aes(ymin = rcs-sd, ymax = rcs + sd), width = 0.2, position = position_dodge(0.9)) +
geom_text(aes(label = round(rcs, digits = 3)), y = 0.006) +
#geom_text(aes(label = comma(rcs)), y = 0.006) + # for scientific labels
ylab(label = "Rate Correct Score") +
theme_minimal() +
scale_fill_brewer(palette = "Accent") +
scale_x_discrete(limits = c("Paper", "Unassisted AR", "Assisted AR")) +
scale_y_continuous(labels = comma) # for scientific labels
p
p <- ggplot(means_sd, aes(x = Condition, y = rcs)) +
geom_bar(stat = "identity", colour = "black", width = 0.8) +
geom_errorbar(aes(ymin = rcs-sd, ymax = rcs + sd), width = 0.2, position = position_dodge(0.9)) +
geom_text(aes(label = round(rcs, digits = 3)), y = 0.006) +
#geom_text(aes(label = comma(rcs)), y = 0.006) + # for scientific labels
ylab(label = "Rate Correct Score") +
theme_minimal() +
scale_fill_brewer(palette = "Accent") +
scale_x_discrete(limits = c("Paper", "Unassisted AR", "Assisted AR")) +
scale_y_continuous(labels = comma) # for scientific labels
p
p <- ggplot(means_sd, aes(x = Condition, y = rcs, fill = "#444444")) +
geom_bar(stat = "identity", colour = "black", width = 0.8) +
geom_errorbar(aes(ymin = rcs-sd, ymax = rcs + sd), width = 0.2, position = position_dodge(0.9)) +
geom_text(aes(label = round(rcs, digits = 3)), y = 0.006) +
#geom_text(aes(label = comma(rcs)), y = 0.006) + # for scientific labels
ylab(label = "Rate Correct Score") +
theme_minimal() +
scale_fill_brewer(palette = "Accent") +
scale_x_discrete(limits = c("Paper", "Unassisted AR", "Assisted AR")) +
scale_y_continuous(labels = comma) # for scientific labels
p
p <- ggplot(means_sd, aes(x = Condition, y = rcs)) +
geom_bar(stat = "identity", colour = "black", width = 0.8) +
geom_errorbar(aes(ymin = rcs-sd, ymax = rcs + sd), width = 0.2, position = position_dodge(0.9)) +
geom_text(aes(label = round(rcs, digits = 3)), y = 0.006) +
#geom_text(aes(label = comma(rcs)), y = 0.006) + # for scientific labels
ylab(label = "Rate Correct Score") +
theme_minimal() +
scale_fill_brewer(palette = "Accent") +
scale_x_discrete(limits = c("Paper", "Unassisted AR", "Assisted AR")) +
scale_y_continuous(labels = comma) # for scientific labels
p <- ggplot(means_sd, aes(x = Condition, y = rcs)) +
geom_bar(stat = "identity", colour = "black", width = 0.8) +
geom_errorbar(aes(ymin = rcs-sd, ymax = rcs + sd), width = 0.2, position = position_dodge(0.9)) +
geom_text(aes(label = round(rcs, digits = 3)), y = 0.006) +
#geom_text(aes(label = comma(rcs)), y = 0.006) + # for scientific labels
ylab(label = "Rate Correct Score") +
theme_minimal() +
scale_fill_brewer(palette = "Accent") +
scale_x_discrete(limits = c("Paper", "Unassisted AR", "Assisted AR")) +
scale_y_continuous(labels = comma) # for scientific labels
p
p <- ggplot(means_sd, aes(x = Condition, y = rcs)) +
geom_bar(stat = "identity", colour = "black", fill = "white", width = 0.8) +
geom_errorbar(aes(ymin = rcs-sd, ymax = rcs + sd), width = 0.2, position = position_dodge(0.9)) +
geom_text(aes(label = round(rcs, digits = 3)), y = 0.006) +
#geom_text(aes(label = comma(rcs)), y = 0.006) + # for scientific labels
ylab(label = "Rate Correct Score") +
theme_minimal() +
scale_fill_brewer(palette = "Accent") +
scale_x_discrete(limits = c("Paper", "Unassisted AR", "Assisted AR")) +
scale_y_continuous(labels = comma) # for scientific labels
p
p <- ggplot(means_sd, aes(x = Condition, y = rcs)) +
geom_bar(stat = "identity", colour = "blue", fill = "white", width = 0.8) +
geom_errorbar(aes(ymin = rcs-sd, ymax = rcs + sd), width = 0.2, position = position_dodge(0.9)) +
geom_text(aes(label = round(rcs, digits = 3)), y = 0.006) +
#geom_text(aes(label = comma(rcs)), y = 0.006) + # for scientific labels
ylab(label = "Rate Correct Score") +
theme_minimal() +
scale_fill_brewer(palette = "Accent") +
scale_x_discrete(limits = c("Paper", "Unassisted AR", "Assisted AR")) +
scale_y_continuous(labels = comma) # for scientific labels
p
p <- ggplot(means_sd, aes(x = Condition, y = rcs)) +
geom_bar(stat = "identity", colour = "blue", fill = "white", width = 0.5) +
geom_errorbar(aes(ymin = rcs-sd, ymax = rcs + sd), width = 0.2, position = position_dodge(0.9)) +
geom_text(aes(label = round(rcs, digits = 3)), y = 0.006) +
#geom_text(aes(label = comma(rcs)), y = 0.006) + # for scientific labels
ylab(label = "Rate Correct Score") +
theme_minimal() +
scale_fill_brewer(palette = "Accent") +
scale_x_discrete(limits = c("Paper", "Unassisted AR", "Assisted AR")) +
scale_y_continuous(labels = comma) # for scientific labels
p
p <- ggplot(means_sd, aes(x = Condition, y = rcs)) +
geom_bar(stat = "identity", colour = "blue", fill = "white", width = 0.8) +
geom_errorbar(aes(ymin = rcs-sd, ymax = rcs + sd), width = 0.2, position = position_dodge(0.9)) +
geom_text(aes(label = round(rcs, digits = 3)), y = 0.006) +
#geom_text(aes(label = comma(rcs)), y = 0.006) + # for scientific labels
ylab(label = "Rate Correct Score") +
theme_minimal() +
scale_fill_brewer(palette = "Accent") +
scale_x_discrete(limits = c("Paper", "Unassisted AR", "Assisted AR")) +
scale_y_continuous(labels = comma) # for scientific labels
p <- ggplot(means_sd, aes(x = Condition, y = rcs)) +
geom_bar(stat = "identity", colour = "black", fill = "grey100", width = 0.8) +
geom_errorbar(aes(ymin = rcs-sd, ymax = rcs + sd), width = 0.2, position = position_dodge(0.9)) +
geom_text(aes(label = round(rcs, digits = 3)), y = 0.006) +
#geom_text(aes(label = comma(rcs)), y = 0.006) + # for scientific labels
ylab(label = "Rate Correct Score") +
theme_minimal() +
scale_fill_brewer(palette = "Accent") +
scale_x_discrete(limits = c("Paper", "Unassisted AR", "Assisted AR")) +
scale_y_continuous(labels = comma) # for scientific labels
p
p <- ggplot(means_sd, aes(x = Condition, y = rcs)) +
geom_bar(stat = "identity", colour = "black", fill = "#555555", width = 0.8) +
geom_errorbar(aes(ymin = rcs-sd, ymax = rcs + sd), width = 0.2, position = position_dodge(0.9)) +
geom_text(aes(label = round(rcs, digits = 3)), y = 0.006) +
#geom_text(aes(label = comma(rcs)), y = 0.006) + # for scientific labels
ylab(label = "Rate Correct Score") +
theme_minimal() +
scale_fill_brewer(palette = "Accent") +
scale_x_discrete(limits = c("Paper", "Unassisted AR", "Assisted AR")) +
scale_y_continuous(labels = comma) # for scientific labels
p
p <- ggplot(means_sd, aes(x = Condition, y = rcs)) +
geom_bar(stat = "identity", colour = "black", fill = "#999999", width = 0.8) +
geom_errorbar(aes(ymin = rcs-sd, ymax = rcs + sd), width = 0.2, position = position_dodge(0.9)) +
geom_text(aes(label = round(rcs, digits = 3)), y = 0.006) +
#geom_text(aes(label = comma(rcs)), y = 0.006) + # for scientific labels
ylab(label = "Rate Correct Score") +
theme_minimal() +
scale_fill_brewer(palette = "Accent") +
scale_x_discrete(limits = c("Paper", "Unassisted AR", "Assisted AR")) +
scale_y_continuous(labels = comma) # for scientific labels
p
p <- ggplot(means_sd, aes(x = Condition, y = rcs)) +
geom_bar(stat = "identity", colour = "black", fill = "blue", width = 0.8) +
geom_errorbar(aes(ymin = rcs-sd, ymax = rcs + sd), width = 0.2, position = position_dodge(0.9)) +
geom_text(aes(label = round(rcs, digits = 3)), y = 0.006) +
#geom_text(aes(label = comma(rcs)), y = 0.006) + # for scientific labels
ylab(label = "Rate Correct Score") +
theme_minimal() +
scale_fill_brewer(palette = "Accent") +
scale_x_discrete(limits = c("Paper", "Unassisted AR", "Assisted AR")) +
scale_y_continuous(labels = comma) # for scientific labels
p
p <- ggplot(means_sd, aes(x = Condition, y = rcs)) +
geom_bar(stat = "identity", colour = "black", fill = "#999999", width = 0.8) +
geom_errorbar(aes(ymin = rcs-sd, ymax = rcs + sd), width = 0.2, position = position_dodge(0.9)) +
geom_text(aes(label = round(rcs, digits = 3)), y = 0.006) +
#geom_text(aes(label = comma(rcs)), y = 0.006) + # for scientific labels
ylab(label = "Rate Correct Score") +
theme_minimal() +
scale_fill_brewer(palette = "Accent") +
scale_x_discrete(limits = c("Paper", "Unassisted AR", "Assisted AR")) +
scale_y_continuous(labels = comma) # for scientific labels
p
p <- ggplot(means_sd, aes(x = Condition, y = rcs)) +
geom_bar(stat = "identity", colour = "black", fill = "#BBBBBB", width = 0.8) +
geom_errorbar(aes(ymin = rcs-sd, ymax = rcs + sd), width = 0.2, position = position_dodge(0.9)) +
geom_text(aes(label = round(rcs, digits = 3)), y = 0.006) +
#geom_text(aes(label = comma(rcs)), y = 0.006) + # for scientific labels
ylab(label = "Rate Correct Score") +
theme_minimal() +
scale_fill_brewer(palette = "Accent") +
scale_x_discrete(limits = c("Paper", "Unassisted AR", "Assisted AR")) +
scale_y_continuous(labels = comma) # for scientific labels
p
p <- ggplot(means_sd, aes(x = Condition, y = rcs)) +
geom_bar(stat = "identity", colour = "black", fill = "#CCCCCC", width = 0.8) +
geom_errorbar(aes(ymin = rcs-sd, ymax = rcs + sd), width = 0.2, position = position_dodge(0.9)) +
geom_text(aes(label = round(rcs, digits = 3)), y = 0.006) +
#geom_text(aes(label = comma(rcs)), y = 0.006) + # for scientific labels
ylab(label = "Rate Correct Score") +
theme_minimal() +
scale_fill_brewer(palette = "Accent") +
scale_x_discrete(limits = c("Paper", "Unassisted AR", "Assisted AR")) +
scale_y_continuous(labels = comma) # for scientific labels
p
p <- ggplot(means_sd, aes(x = Condition, y = rcs)) +
geom_bar(stat = "identity", colour = "black", fill = "#CCCCCC", width = 0.8) +
geom_errorbar(aes(ymin = rcs-sd, ymax = rcs + sd), width = 0.2, position = position_dodge(0.9)) +
geom_text(aes(label = round(rcs, digits = 3)), y = 0.006, colour = "white") +
#geom_text(aes(label = comma(rcs)), y = 0.006) + # for scientific labels
ylab(label = "Rate Correct Score") +
theme_minimal() +
scale_fill_brewer(palette = "Accent") +
scale_x_discrete(limits = c("Paper", "Unassisted AR", "Assisted AR")) +
scale_y_continuous(labels = comma) # for scientific labels
p
p <- ggplot(means_sd, aes(x = Condition, y = rcs)) +
geom_bar(stat = "identity", colour = "black", fill = "#CCCCCC", width = 0.8) +
geom_errorbar(aes(ymin = rcs-sd, ymax = rcs + sd), width = 0.2, position = position_dodge(0.9)) +
geom_text(aes(label = round(rcs, digits = 3)), y = 0.006) +
#geom_text(aes(label = comma(rcs)), y = 0.006) + # for scientific labels
ylab(label = "Rate Correct Score") +
theme_minimal() +
scale_fill_brewer(palette = "Accent") +
scale_x_discrete(limits = c("Paper", "Unassisted AR", "Assisted AR")) +
scale_y_continuous(labels = comma) # for scientific labels
p
agent_rewards <- c(0.8676143688019565, 1.0, 0.8571950588211401, 0.7960444178280344, 0.7912585389620264, 0.7761091769100389, 0.7887666338472796, 0.8083009368751196, 0.7768653762218447, 0.7456531227478951, 0.7935880388554484, 0.7349293029770919, 0.7936540159766147, 0.7408672438818896, 0.7684253798759644, 0.7733736639632964, 0.772866147646648, 0.8241658969335852, 0.7495000964281013, 0.7505861813457316)
random_solver_rewards <- c(0.0, 0.07667048995625265, 0.0906170383377829, 0.08721160385306392, 0.1089942041636645, 0.05251778844689907, 0.13987657203179116, 0.101432211045585, 0.14318050325317994, 0.1634608552664971, 0.16828226027466803, 0.10956262243831187, 0.08142591784325871, 0.014022675829028415, 0.005653731767476396, 0.16458246632629278, 0.14438331692364023, 0.045092824734315376, 0.2692272556562693, 0.038621991697032676)
rewards = []
rewards <- data.frame(unlist(agent_rewards),unlist(random_solver_rewards))
View(rewards)
rewards <- data.frame(agent_rewards,random_solver_rewards)
agent_rewards <- data.frame(rep("AGENT",length(agent_rewards)),agent_rewards)
View(agent_rewards)
agent_rewards <- c(0.8676143688019565, 1.0, 0.8571950588211401, 0.7960444178280344, 0.7912585389620264, 0.7761091769100389, 0.7887666338472796, 0.8083009368751196, 0.7768653762218447, 0.7456531227478951, 0.7935880388554484, 0.7349293029770919, 0.7936540159766147, 0.7408672438818896, 0.7684253798759644, 0.7733736639632964, 0.772866147646648, 0.8241658969335852, 0.7495000964281013, 0.7505861813457316)
random_solver_rewards <- c(0.0, 0.07667048995625265, 0.0906170383377829, 0.08721160385306392, 0.1089942041636645, 0.05251778844689907, 0.13987657203179116, 0.101432211045585, 0.14318050325317994, 0.1634608552664971, 0.16828226027466803, 0.10956262243831187, 0.08142591784325871, 0.014022675829028415, 0.005653731767476396, 0.16458246632629278, 0.14438331692364023, 0.045092824734315376, 0.2692272556562693, 0.038621991697032676)
agent_rewards <- data.frame(rep("AG",length(agent_rewards)),agent_rewards)
random_solver_rewards <- data.frame(rep("RS",length(random_solver_rewards)),random_solver_rewards)
View(random_solver_rewards)
View(agent_rewards)
View(agent_rewards)
agent_rewards <- c(0.8676143688019565, 1.0, 0.8571950588211401, 0.7960444178280344, 0.7912585389620264, 0.7761091769100389, 0.7887666338472796, 0.8083009368751196, 0.7768653762218447, 0.7456531227478951, 0.7935880388554484, 0.7349293029770919, 0.7936540159766147, 0.7408672438818896, 0.7684253798759644, 0.7733736639632964, 0.772866147646648, 0.8241658969335852, 0.7495000964281013, 0.7505861813457316)
random_solver_rewards <- c(0.0, 0.07667048995625265, 0.0906170383377829, 0.08721160385306392, 0.1089942041636645, 0.05251778844689907, 0.13987657203179116, 0.101432211045585, 0.14318050325317994, 0.1634608552664971, 0.16828226027466803, 0.10956262243831187, 0.08142591784325871, 0.014022675829028415, 0.005653731767476396, 0.16458246632629278, 0.14438331692364023, 0.045092824734315376, 0.2692272556562693, 0.038621991697032676)
agent_rewards <- data.frame(rep("AG",length(agent_rewards)),agent_rewards)
random_solver_rewards <- data.frame(rep("RS",length(random_solver_rewards)),random_solver_rewards)
colnames(agent_rewards) <- c('Solver','Reward')
colnames(random_solver_rewards) <- c('Solver','Reward')
all_rewards <- merge(agent_rewards,random_solver_rewards,by = 'row.names', all = TRUE)
View(all_rewards)
View(all_rewards)
View(agent_rewards)
View(random_solver_rewards)
agent_rewards <- c(0.8676143688019565, 1.0, 0.8571950588211401, 0.7960444178280344, 0.7912585389620264, 0.7761091769100389, 0.7887666338472796, 0.8083009368751196, 0.7768653762218447, 0.7456531227478951, 0.7935880388554484, 0.7349293029770919, 0.7936540159766147, 0.7408672438818896, 0.7684253798759644, 0.7733736639632964, 0.772866147646648, 0.8241658969335852, 0.7495000964281013, 0.7505861813457316)
random_solver_rewards <- c(0.0, 0.07667048995625265, 0.0906170383377829, 0.08721160385306392, 0.1089942041636645, 0.05251778844689907, 0.13987657203179116, 0.101432211045585, 0.14318050325317994, 0.1634608552664971, 0.16828226027466803, 0.10956262243831187, 0.08142591784325871, 0.014022675829028415, 0.005653731767476396, 0.16458246632629278, 0.14438331692364023, 0.045092824734315376, 0.2692272556562693, 0.038621991697032676)
agent_rewards <- data.frame(rep("AG",length(agent_rewards)),agent_rewards)
random_solver_rewards <- data.frame(rep("RS",length(random_solver_rewards)),random_solver_rewards)
colnames(agent_rewards) <- c('Solver','Reward')
colnames(random_solver_rewards) <- c('Solver','Reward')
all_rewards <- merge(agent_rewards,random_solver_rewards,by = 'col.names', all = TRUE)
agent_rewards <- c(0.8676143688019565, 1.0, 0.8571950588211401, 0.7960444178280344, 0.7912585389620264, 0.7761091769100389, 0.7887666338472796, 0.8083009368751196, 0.7768653762218447, 0.7456531227478951, 0.7935880388554484, 0.7349293029770919, 0.7936540159766147, 0.7408672438818896, 0.7684253798759644, 0.7733736639632964, 0.772866147646648, 0.8241658969335852, 0.7495000964281013, 0.7505861813457316)
random_solver_rewards <- c(0.0, 0.07667048995625265, 0.0906170383377829, 0.08721160385306392, 0.1089942041636645, 0.05251778844689907, 0.13987657203179116, 0.101432211045585, 0.14318050325317994, 0.1634608552664971, 0.16828226027466803, 0.10956262243831187, 0.08142591784325871, 0.014022675829028415, 0.005653731767476396, 0.16458246632629278, 0.14438331692364023, 0.045092824734315376, 0.2692272556562693, 0.038621991697032676)
agent_rewards <- data.frame(rep("AG",length(agent_rewards)),agent_rewards)
random_solver_rewards <- data.frame(rep("RS",length(random_solver_rewards)),random_solver_rewards)
colnames(agent_rewards) <- c('Solver','Reward')
colnames(random_solver_rewards) <- c('Solver','Reward')
all_rewards <- rbind(agent_rewards,random_solver_rewards)
View(agent_rewards)
View(all_rewards)
agent_rewards <- c(0.8676143688019565, 1.0, 0.8571950588211401, 0.7960444178280344, 0.7912585389620264, 0.7761091769100389, 0.7887666338472796, 0.8083009368751196, 0.7768653762218447, 0.7456531227478951, 0.7935880388554484, 0.7349293029770919, 0.7936540159766147, 0.7408672438818896, 0.7684253798759644, 0.7733736639632964, 0.772866147646648, 0.8241658969335852, 0.7495000964281013, 0.7505861813457316)
random_solver_rewards <- c(0.0, 0.07667048995625265, 0.0906170383377829, 0.08721160385306392, 0.1089942041636645, 0.05251778844689907, 0.13987657203179116, 0.101432211045585, 0.14318050325317994, 0.1634608552664971, 0.16828226027466803, 0.10956262243831187, 0.08142591784325871, 0.014022675829028415, 0.005653731767476396, 0.16458246632629278, 0.14438331692364023, 0.045092824734315376, 0.2692272556562693, 0.038621991697032676)
agent_rewards <- data.frame(rep("AG",length(agent_rewards)),agent_rewards)
random_solver_rewards <- data.frame(rep("RS",length(random_solver_rewards)),random_solver_rewards)
colnames(agent_rewards) <- c('Solver','Reward')
colnames(random_solver_rewards) <- c('Solver','Reward')
all_rewards <- rbind(agent_rewards,random_solver_rewards)
# ASSUMPTIONS
#outlier
all_rewards %>% group_by(Solver) %>% identify_outliers(Reward);
#shapiro test
all_rewards %>% group_by(Solver) %>% shapiro_test(Reward);
#test homogeneity
leveneTest(all_rewards$Reward~all_rewards$Solver);
=
#qqplots
ggqqplot(all_rewards,"Reward", ggtheme = theme_bw()) +
facet_grid(~Solver, labeller = "label_both");
agent_rewards <- c(0.8676143688019565, 1.0, 0.8571950588211401, 0.7960444178280344, 0.7912585389620264, 0.7761091769100389, 0.7887666338472796, 0.8083009368751196, 0.7768653762218447, 0.7456531227478951, 0.7935880388554484, 0.7349293029770919, 0.7936540159766147, 0.7408672438818896, 0.7684253798759644, 0.7733736639632964, 0.772866147646648, 0.8241658969335852, 0.7495000964281013, 0.7505861813457316)
random_solver_rewards <- c(0.0, 0.07667048995625265, 0.0906170383377829, 0.08721160385306392, 0.1089942041636645, 0.05251778844689907, 0.13987657203179116, 0.101432211045585, 0.14318050325317994, 0.1634608552664971, 0.16828226027466803, 0.10956262243831187, 0.08142591784325871, 0.014022675829028415, 0.005653731767476396, 0.16458246632629278, 0.14438331692364023, 0.045092824734315376, 0.2692272556562693, 0.038621991697032676)
agent_rewards <- data.frame(rep("AG",length(agent_rewards)),agent_rewards)
random_solver_rewards <- data.frame(rep("RS",length(random_solver_rewards)),random_solver_rewards)
colnames(agent_rewards) <- c('Solver','Reward')
colnames(random_solver_rewards) <- c('Solver','Reward')
all_rewards <- rbind(agent_rewards,random_solver_rewards)
# ASSUMPTIONS
#outlier
all_rewards %>% group_by(Solver) %>% identify_outliers(Reward);
rm(list = ls());
setwd("/Users/bsyiem/Documents/UnityProjects/PLMS/RScripts");
# for reading xlsx files
library("xlsx")
#used to easily plot qqplots and Anova
library("car");
library("ez");
#for two way Anova
library(tidyverse);
library(ggpubr);
library(rstatix);
library(scales)
#Multilevel Linear Model
library(lme4);
library(lmerTest);
#data formatting
library(dplyr);
library(tidyr);
library(data.table);
library(plyr);
library(MASS);
# for equivalence test
library("TOSTER");
library(pwr);
library(rje);
#####################################
# PREPARING DATA
#####################################
mpath <- "../PythonScripts/Data/Participant_Data/"
agent_rewards <- c(0.8676143688019565, 1.0, 0.8571950588211401, 0.7960444178280344, 0.7912585389620264, 0.7761091769100389, 0.7887666338472796, 0.8083009368751196, 0.7768653762218447, 0.7456531227478951, 0.7935880388554484, 0.7349293029770919, 0.7936540159766147, 0.7408672438818896, 0.7684253798759644, 0.7733736639632964, 0.772866147646648, 0.8241658969335852, 0.7495000964281013, 0.7505861813457316)
random_solver_rewards <- c(0.0, 0.07667048995625265, 0.0906170383377829, 0.08721160385306392, 0.1089942041636645, 0.05251778844689907, 0.13987657203179116, 0.101432211045585, 0.14318050325317994, 0.1634608552664971, 0.16828226027466803, 0.10956262243831187, 0.08142591784325871, 0.014022675829028415, 0.005653731767476396, 0.16458246632629278, 0.14438331692364023, 0.045092824734315376, 0.2692272556562693, 0.038621991697032676)
agent_rewards <- data.frame(rep("AG",length(agent_rewards)),agent_rewards)
random_solver_rewards <- data.frame(rep("RS",length(random_solver_rewards)),random_solver_rewards)
colnames(agent_rewards) <- c('Solver','Reward')
colnames(random_solver_rewards) <- c('Solver','Reward')
all_rewards <- rbind(agent_rewards,random_solver_rewards)
# ASSUMPTIONS
#outlier
all_rewards %>% group_by(Solver) %>% identify_outliers(Reward);
#shapiro test
all_rewards %>% group_by(Solver) %>% shapiro_test(Reward);
#test homogeneity
leveneTest(all_rewards$Reward~all_rewards$Solver);
clear()
cls()
agent_rewards <- c(0.8676143688019565, 1.0, 0.8571950588211401, 0.7960444178280344, 0.7912585389620264, 0.7761091769100389, 0.7887666338472796, 0.8083009368751196, 0.7768653762218447, 0.7456531227478951, 0.7935880388554484, 0.7349293029770919, 0.7936540159766147, 0.7408672438818896, 0.7684253798759644, 0.7733736639632964, 0.772866147646648, 0.8241658969335852, 0.7495000964281013, 0.7505861813457316)
random_solver_rewards <- c(0.0, 0.07667048995625265, 0.0906170383377829, 0.08721160385306392, 0.1089942041636645, 0.05251778844689907, 0.13987657203179116, 0.101432211045585, 0.14318050325317994, 0.1634608552664971, 0.16828226027466803, 0.10956262243831187, 0.08142591784325871, 0.014022675829028415, 0.005653731767476396, 0.16458246632629278, 0.14438331692364023, 0.045092824734315376, 0.2692272556562693, 0.038621991697032676)
agent_rewards <- data.frame(rep("AG",length(agent_rewards)),agent_rewards)
random_solver_rewards <- data.frame(rep("RS",length(random_solver_rewards)),random_solver_rewards)
colnames(agent_rewards) <- c('Solver','Reward')
colnames(random_solver_rewards) <- c('Solver','Reward')
all_rewards <- rbind(agent_rewards,random_solver_rewards)
# ASSUMPTIONS
#outlier
all_rewards %>% group_by(Solver) %>% identify_outliers(Reward);
library("xlsx")
#used to easily plot qqplots and Anova
library("car");
library("ez");
#for two way Anova
library(tidyverse);
library(ggpubr);
library(rstatix);
library(scales)
#Multilevel Linear Model
library(lme4);
library(lmerTest);
#data formatting
library(dplyr);
library(tidyr);
library(data.table);
library(plyr);
library(MASS);
# for equivalence test
library("TOSTER");
library(pwr);
library(rje);
agent_rewards <- c(0.8676143688019565, 1.0, 0.8571950588211401, 0.7960444178280344, 0.7912585389620264, 0.7761091769100389, 0.7887666338472796, 0.8083009368751196, 0.7768653762218447, 0.7456531227478951, 0.7935880388554484, 0.7349293029770919, 0.7936540159766147, 0.7408672438818896, 0.7684253798759644, 0.7733736639632964, 0.772866147646648, 0.8241658969335852, 0.7495000964281013, 0.7505861813457316)
random_solver_rewards <- c(0.0, 0.07667048995625265, 0.0906170383377829, 0.08721160385306392, 0.1089942041636645, 0.05251778844689907, 0.13987657203179116, 0.101432211045585, 0.14318050325317994, 0.1634608552664971, 0.16828226027466803, 0.10956262243831187, 0.08142591784325871, 0.014022675829028415, 0.005653731767476396, 0.16458246632629278, 0.14438331692364023, 0.045092824734315376, 0.2692272556562693, 0.038621991697032676)
agent_rewards <- data.frame(rep("AG",length(agent_rewards)),agent_rewards)
random_solver_rewards <- data.frame(rep("RS",length(random_solver_rewards)),random_solver_rewards)
colnames(agent_rewards) <- c('Solver','Reward')
colnames(random_solver_rewards) <- c('Solver','Reward')
all_rewards <- rbind(agent_rewards,random_solver_rewards)
# ASSUMPTIONS
#outlier
all_rewards %>% group_by(Solver) %>% identify_outliers(Reward);
#shapiro test
all_rewards %>% group_by(Solver) %>% shapiro_test(Reward);
#test homogeneity
leveneTest(all_rewards$Reward~all_rewards$Solver);
#qqplots
ggqqplot(all_rewards,"Reward", ggtheme = theme_bw()) +
facet_grid(~Solver, labeller = "label_both");
View(agent_rewards)
View(all_rewards)
agent_rewards <- c(0.9995548489666136, 0.8908165919930641, 0.8709004191357123, 0.9730192224309856, 0.8621072409307717, 0.9826448908801841, 0.9625957508310439, 0.8728775834658171, 0.98837404249169, 0.9242202630437912, 0.9897152767740995, 0.971591270414801, 0.898881341234281, 0.8865442983090054, 1.0, 0.8704032374620618, 0.9959647347882641, 0.8778320566555847, 0.8979679144385012, 0.8732533603121847)
random_solver_rewards <- c(0.140534759358288, 0.11719034542563869, 0.09954617719323511, 0.11414366237895582, 0.14486486486486408, 0.023165197282843348, 0.10909090909090853, 0.2684723225899686, 0.16594305535481962, 0.009949414655297141, 0.0, 0.10609047550223935, 0.13342968637086303, 0.08177482295129317, 0.2545107674519431, 0.15048417401358502, 0.061118658765715775, 0.08015031073854574, 0.11834658187599258, 0.20663101604277956)
agent_rewards <- data.frame(rep("AG",length(agent_rewards)),agent_rewards)
random_solver_rewards <- data.frame(rep("RS",length(random_solver_rewards)),random_solver_rewards)
colnames(agent_rewards) <- c('Solver','Reward')
colnames(random_solver_rewards) <- c('Solver','Reward')
all_rewards <- rbind(agent_rewards,random_solver_rewards)
reward_summary <- all_rewards %>% group_by(Solver) %>% get_summary_stats(Reward, type = "mean_sd")
reward_summary
# ASSUMPTIONS
#outlier
all_rewards %>% group_by(Solver) %>% identify_outliers(Reward);
#shapiro test
all_rewards %>% group_by(Solver) %>% shapiro_test(Reward);
#test homogeneity
leveneTest(all_rewards$Reward~all_rewards$Solver);
#qqplots
ggqqplot(all_rewards,"Reward", ggtheme = theme_bw()) +
facet_grid(~Solver, labeller = "label_both");
kruskal.test(Reward~Solver, data = all_rewards)
agent_rewards <- c(-590.500, -1530.950, -1703.200, -820.000, -1779.250, -736.750, -910.150, -1686.100, -687.200, -1242.050, -675.600, -832.350, -1461.200, -1567.900, -586.650, -1707.500, -621.550, -1643.250, -1469.100, -1682.850)
random_solver_rewards <- c(-8019.950000000002,-8221.850000000002,-8374.450000000003,-8248.2,-7982.500000000002,-9035.050000000003,-8291.9,-6913.450000000004,-7800.199999999999,-9149.349999999993,-9235.399999999994,-8317.850000000002,-8081.399999999993,-8528.149999999998,-7034.200000000003,-7933.9000000000015,-8706.80000000001,-8542.199999999997,-8211.850000000004,-7448.300000000006)
agent_rewards <- data.frame(rep("AG",length(agent_rewards)),agent_rewards)
random_solver_rewards <- data.frame(rep("RS",length(random_solver_rewards)),random_solver_rewards)
colnames(agent_rewards) <- c('Solver','Reward')
colnames(random_solver_rewards) <- c('Solver','Reward')
all_rewards <- rbind(agent_rewards,random_solver_rewards)
reward_summary <- all_rewards %>% group_by(Solver) %>% get_summary_stats(Reward, type = "mean_sd")
reward_summary
# ASSUMPTIONS
#outlier
all_rewards %>% group_by(Solver) %>% identify_outliers(Reward);
#shapiro test
all_rewards %>% group_by(Solver) %>% shapiro_test(Reward);
#test homogeneity
leveneTest(all_rewards$Reward~all_rewards$Solver);
#qqplots
ggqqplot(all_rewards,"Reward", ggtheme = theme_bw()) +
facet_grid(~Solver, labeller = "label_both");
kruskal.test(Reward~Solver, data = all_rewards)
rm(list = ls());
setwd("/Users/bsyiem/Documents/UnityProjects/PLMS/RScripts");
# for reading xlsx files
library("xlsx")
#used to easily plot qqplots and Anova
library("car");
library("ez");
#for two way Anova
library(tidyverse);
library(ggpubr);
library(rstatix);
library(scales)
#Multilevel Linear Model
library(lme4);
library(lmerTest);
#data formatting
library(dplyr);
library(tidyr);
library(data.table);
library(plyr);
library(MASS);
# for equivalence test
library("TOSTER");
library(pwr);
library(rje);
agent_rewards <- c(0.7455903704038609, 0.7381049268285339, 0.8132607898398908, 0.8007214159043061, 0.8305828096034729, 0.725334458661762, 0.7870868562644114, 0.8022084570441045, 0.71024300060788, 0.7308405299091203, 0.7295946305757746, 0.7282231365515722, 0.9609852652308679, 0.7435507126242767, 0.8197866899770397, 0.8260865196706392, 0.7682175099094196, 0.7197530305998914, 0.7318302160731046, 0.7285948968365206)
random_solver_rewards <- c(0.03659326912932653, 0.08135019316463397, 0.03820088117235062, 0.11358783841489345, 0.057572606290786525, 0.08399270546035469, 0.16688520142876404, 0.05021778119395276, 0.11120656307616486, 0.07671323717803766, 0.11037763811648121, 0.09349771166473163, 0.116808086288576, 0.17807820027831728, 0.0, 0.06820294092528079, 0.12012378612731177, 0.044495687078315325, 0.14885482760872726, 0.04233545839550147)
agent_rewards <- data.frame(rep("AG",length(agent_rewards)),agent_rewards)
random_solver_rewards <- data.frame(rep("RS",length(random_solver_rewards)),random_solver_rewards)
colnames(agent_rewards) <- c('Solver','Reward')
colnames(random_solver_rewards) <- c('Solver','Reward')
all_rewards <- rbind(agent_rewards,random_solver_rewards)
reward_summary <- all_rewards %>% group_by(Solver) %>% get_summary_stats(Reward, type = "mean_sd")
reward_summary
# ASSUMPTIONS
#outlier
all_rewards %>% group_by(Solver) %>% identify_outliers(Reward);
#shapiro test
all_rewards %>% group_by(Solver) %>% shapiro_test(Reward);
#test homogeneity
leveneTest(all_rewards$Reward~all_rewards$Solver);
#qqplots
ggqqplot(all_rewards,"Reward", ggtheme = theme_bw()) +
facet_grid(~Solver, labeller = "label_both");
#kruskal.test(Reward~Solver, data = all_rewards)
wilcox.test(all_rewards[all_rewards$Solver == "AG",]$Reward, all_rewards[all_rewards$Solver == "RS",]$Reward)
wilcox_test(all_rewards$Reward~factor(all_rewards$Solver), distribution = "exact")
effect_size = 5.41/sqrt(nrow(all_rewards))
effect_size
